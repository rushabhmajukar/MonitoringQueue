param (
    [string]$prefix,
    [string]$COLLECTIONURL,
    [string]$PROJECT,
    [string]$AGENTPOOL,
    [string]$AZ_VMS,
    [string]$AZ_RG,
    [string]$ADO_PAT,
    [string]$AZ_TENANTID,
    [string]$AZ_CLIENTID,
    [string]$AZ_CLIENT_SECRET,
    [string]$AZ_SUBSCRIPTIONID
)

function Monitor-And-Scale {
    param (
        [hashtable]$envContext
    )

    Write-Host "`n===== Checking: $($envContext.Name) ($($envContext.AGENTPOOL)) ====="

    # Azure Login
    $securePassword = ConvertTo-SecureString $envContext["AZ_CLIENT_SECRET"] -AsPlainText -Force
    $cred = New-Object PSCredential ($envContext["AZ_CLIENTID"], $securePassword)
    Connect-AzAccount -ServicePrincipal -TenantId $envContext["AZ_TENANTID"] -Credential $cred | Out-Null
    Set-AzContext -SubscriptionId $envContext["AZ_SUBSCRIPTIONID"] | Out-Null

    # Azure DevOps API Auth
    $base64AuthInfo = [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes(":$($envContext["ADO_PAT"])"))
    $headers = @{
        Authorization = "Basic $base64AuthInfo"
        "Content-Type" = "application/json"
    }

    # Get Agent Pool ID
    $poolUrl = "$($envContext["COLLECTIONURL"])/_apis/distributedtask/pools?api-version=6.0"
    $poolResp = Invoke-RestMethod -Uri $poolUrl -Headers $headers -Method Get
    $poolId = ($poolResp.value | Where-Object { $_.name -eq $envContext["AGENTPOOL"] }).id

    # Check queued builds
    $buildUrl = "$($envContext["COLLECTIONURL"])/$($envContext["PROJECT"])/_apis/build/builds?statusFilter=notStarted`&api-version=6.0"
    $buildResp = Invoke-RestMethod -Uri $buildUrl -Headers $headers -Method Get
    $queuedCount = $buildResp.count

    if ($queuedCount -gt 0) {
        Write-Host "Builds in queue: $queuedCount"

        $agentsUrl = "$($envContext["COLLECTIONURL"])/_apis/distributedtask/pools/$poolId/agents?api-version=6.0"
        $agents = (Invoke-RestMethod -Uri $agentsUrl -Headers $headers).value
        $offlineAgents = $agents | Where-Object { $_.status -eq "offline" }

        foreach ($agent in $offlineAgents) {
            $vmName = $envContext["VMList"] | Where-Object { $_ -like "*$($agent.name)*" }
            if ($vmName) {
                Write-Host "Starting VM: $vmName"
                Start-AzVM -Name $vmName -ResourceGroupName $envContext["AZ_RG"]
            }
        }
    } else {
        Write-Host "No builds in queue. Checking idle agents..."

        $agentsUrl = "$($envContext["COLLECTIONURL"])/_apis/distributedtask/pools/$poolId/agents?includeAssignedRequest=true`&api-version=6.0"
        $agents = (Invoke-RestMethod -Uri $agentsUrl -Headers $headers).value
        $idleAgents = $agents | Where-Object { $_.status -eq "online" -and -not $_.assignedRequest }

        if ($envContext["Name"] -eq "ProDR") {
            foreach ($agent in $idleAgents) {
                $vmName = $envContext["VMList"] | Where-Object { $_ -like "*$($agent.name)*" }
                if ($vmName) {
                    Write-Host "Stopping VM: $vmName"
                    Stop-AzVM -Name $vmName -ResourceGroupName $envContext["AZ_RG"] -Force
                }
            }
        }
        if ($idleAgents.Count -gt 1) {
            $agentsToStop = $idleAgents | Select-Object -Skip 1
            foreach ($agent in $agentsToStop) {
                $vmName = $envContext["VMList"] | Where-Object { $_ -like "*$($agent.name)*" }
                if ($vmName) {
                    Write-Host "Stopping VM: $vmName"
                    Stop-AzVM -Name $vmName -ResourceGroupName $envContext["AZ_RG"] -Force
                }
            }
        } else {
            Write-Host "No action required, skipping shutdown."
        }
    }

    # ðŸ’¡ Good practice: Close the Azure session
    Disconnect-AzAccount | Out-Null
}

# Prepare environment context
$envContext = @{
    "COLLECTIONURL" = $COLLECTIONURL
    "PROJECT" = $PROJECT
    "AGENTPOOL" = $AGENTPOOL
    "AZ_VMS" = $AZ_VMS
    "AZ_RG" = $AZ_RG
    "ADO_PAT" = $ADO_PAT
    "AZ_TENANTID" = $AZ_TENANTID
    "AZ_CLIENTID" = $AZ_CLIENTID
    "AZ_CLIENT_SECRET" = $AZ_CLIENT_SECRET
    "AZ_SUBSCRIPTIONID" = $AZ_SUBSCRIPTIONID
    "VMList" = $AZ_VMS -split ","
    "Name" = $prefix
}

Monitor-And-Scale -envContext $envContext
