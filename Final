param (
    [string]$prefix,
    [string]$CollectionURL,
    [string]$Project,
    [string]$AgentPool,
    [string]$Az_VMs,
    [string]$Az_RG,
    [string]$ADO_PAT,
    [string]$Az_TenantID,
    [string]$Az_ClientID,
    [string]$Az_Client_Secret,
    [string]$Az_SubscriptionID,
    [string]$Az_VMs_RGs_Subs_Mapping
)

function Monitor-And-Scale {
    param (
        [hashtable]$envContext
    )

    Write-Host "`n===== Checking: ($($envContext.Agentpool)) ====="

    # Azure Login
    $securePassword = ConvertTo-SecureString $envContext["AZ_CLIENT_SECRET"] -AsPlainText -Force
    $cred = New-Object PSCredential ($envContext["AZ_CLIENTID"], $securePassword)
    Connect-AzAccount -ServicePrincipal -TenantId $envContext["AZ_TENANTID"] -Credential $cred | Out-Null

    # Azure DevOps API Auth
    $base64AuthInfo = [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes(":$($envContext["ADO_PAT"])"))
    $headers = @{
        Authorization = "Basic $base64AuthInfo"
        "Content-Type" = "application/json"
    }

    # Get Agent Pool ID
    $poolUrl = "$($envContext["COLLECTIONURL"])/_apis/distributedtask/pools?api-version=6.0"
    $poolResp = Invoke-RestMethod -Uri $poolUrl -Headers $headers -Method Get
    $poolId = ($poolResp.value | Where-Object { $_.name -eq $envContext["AGENTPOOL"] }).id

    # Check queued builds
    $buildUrl = "$($envContext["COLLECTIONURL"])/$($envContext["PROJECT"])/_apis/build/builds?statusFilter=notStarted`&api-version=6.0"
    $buildResp = Invoke-RestMethod -Uri $buildUrl -Headers $headers -Method Get
    $queuedCount = $buildResp.count

    if ($queuedCount -gt 0) {
        Write-Host "Builds in queue: $queuedCount"

        $agentsUrl = "$($envContext["COLLECTIONURL"])/_apis/distributedtask/pools/$poolId/agents?api-version=6.0"
        $agents = (Invoke-RestMethod -Uri $agentsUrl -Headers $headers).value
        $offlineAgents = $agents | Where-Object { $_.status -eq "offline" }

        foreach ($agent in $offlineAgents) {
            if ($envContext["Name"] -eq "ProAB") {
                $mapping = ($envContext["AZ_VMS_RGs_Subs"] | ConvertFrom-Json) | Where-Object { $_.VMName -eq $agent.name }
                if ($mapping) {
                    Write-Host "Starting VM: $($mapping.VMName)"
                    Set-AzContext -SubscriptionId $mapping.SubscriptionID | Out-Null
                    Start-AzVM -Name $mapping.VMName -ResourceGroupName $mapping.ResourceGroup
                }
            } else {
                $vmName = $envContext["VMList"] | Where-Object { $_ -like "*$($agent.name)*" }
                if ($vmName) {
                    Write-Host "Starting VM: $vmName"
                    Set-AzContext -SubscriptionId $envContext["AZ_SUBSCRIPTIONID"] | Out-Null
                    Start-AzVM -Name $vmName -ResourceGroupName $envContext["AZ_RG"]
                }
            }
        }
    } else {
        Write-Host "No builds in queue. Checking idle agents..."

        $agentsUrl = "$($envContext["COLLECTIONURL"])/_apis/distributedtask/pools/$poolId/agents?includeAssignedRequest=true`&api-version=6.0"
        $agents = (Invoke-RestMethod -Uri $agentsUrl -Headers $headers).value
        $idleAgents = $agents | Where-Object { $_.status -eq "online" -and -not $_.assignedRequest }

        if ($envContext["Name"] -eq "ProDR") {
            foreach ($agent in $idleAgents) {
                $vmName = $envContext["VMList"] | Where-Object { $_ -like "*$($agent.name)*" }
                if ($vmName) {
                    Write-Host "Stopping VM: $vmName"
                    Set-AzContext -SubscriptionId $envContext["AZ_SUBSCRIPTIONID"] | Out-Null
                    Stop-AzVM -Name $vmName -ResourceGroupName $envContext["AZ_RG"] -Force
                }
            }
        } elseif ($envContext["Name"] -eq "ProAB") {
            $vmMappings = $envContext["AZ_VMS_RGs_Subs"] | ConvertFrom-Json
            if ($idleAgents.Count -gt 1) {
                $agentsToStop = $idleAgents | Select-Object -Skip 1
                foreach ($agent in $agentsToStop) {
                    $mapping = $vmMappings | Where-Object { $_.VMName -eq $agent.name }
                    if ($mapping) {
                        Write-Host "Stopping VM: $($mapping.VMName)"
                        Set-AzContext -SubscriptionId $mapping.SubscriptionID | Out-Null
                        Stop-AzVM -Name $mapping.VMName -ResourceGroupName $mapping.ResourceGroup -Force
                    }
                }
            } else {
                Write-Host "No action required, skipping shutdown."
            }
        } else {
            if ($idleAgents.Count -gt 1) {
                $agentsToStop = $idleAgents | Select-Object -Skip 1
                foreach ($agent in $agentsToStop) {
                    $vmName = $envContext["VMList"] | Where-Object { $_ -like "*$($agent.name)*" }
                    if ($vmName) {
                        Write-Host "Stopping VM: $vmName"
                        Set-AzContext -SubscriptionId $envContext["AZ_SUBSCRIPTIONID"] | Out-Null
                        Stop-AzVM -Name $vmName -ResourceGroupName $envContext["AZ_RG"] -Force
                    }
                }
            } else {
                Write-Host "No action required, skipping shutdown."
            }
        }
    }

    Disconnect-AzAccount | Out-Null
}

# Prepare environment context
$envContext = @{
    "COLLECTIONURL" = $CollectionURL
    "PROJECT" = $Project
    "AGENTPOOL" = $AgentPool
    "ADO_PAT" = $ADO_PAT
    "AZ_TENANTID" = $Az_TenantID
    "AZ_CLIENTID" = $Az_ClientID
    "AZ_CLIENT_SECRET" = $Az_Client_Secret
    "Name" = $prefix
}

if ($prefix -eq "ProAB") {
    $envContext["AZ_VMS_RGs_Subs"] = $Az_VMs_RGs_Subs_Mapping
} else {
    $envContext["AZ_VMS"] = $Az_VMs
    $envContext["AZ_RG"] = $Az_RG
    $envContext["AZ_SUBSCRIPTIONID"] = $Az_SubscriptionID
    $envContext["VMList"] = $Az_VMs -split ","
}

Monitor-And-Scale -envContext $envContext

